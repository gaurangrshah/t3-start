import { type NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';
import { NextSeo } from 'next-seo';
import { trpc } from '@/utils/trpc';
import { Bar } from '@/components';
import { Button, chakra, Flex } from '@chakra-ui/react';
import { SEOConfig } from '@/utils';
import { randomColor } from '@chakra-ui/theme-tools';
import { AvatarMenu } from '@/components/avatar-menu';
import { SkipNavLink, SkipNavContent } from '@chakra-ui/skip-nav';

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: 'from tRPC' });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NextSeo
        {...SEOConfig(
          'Create T3 App',
          'Build Fast',
          'Fully type-safe development'
        )}
      />
      <SkipNavLink zIndex="dropdown">Skip to content</SkipNavLink>
      <Bar />
      <chakra.div
        layerStyle="flex-center"
        minH="100vh"
        bgGradient="linear(to-b, #2e026d, #15162c)"
      >
        <SkipNavContent />
        <chakra.div textAlign="center">
          <chakra.h1 as="h1" color={randomColor()}>
            Create <chakra.span color={randomColor()}>T3</chakra.span> App
          </chakra.h1>
          <Flex direction="column" align="center" gap="0.5rem">
            <chakra.p color="white" fontSize="2xl">
              {hello.data ? hello.data.greeting : 'Loading tRPC query...'}
            </chakra.p>
            <AuthShowcase />
          </Flex>
        </chakra.div>
      </chakra.div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <>
      <AvatarMenu />
      <chakra.div layerStyle="flex-center" flexDirection="column" gap={4}>
        <chakra.p color="white" fontSize="2xl">
          {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </chakra.p>
        <Button
          variant="pill"
          bg="rgba(255, 255, 255, 0.1)"
          p="0.75rem 2.5rem"
          color="white"
          onClick={sessionData ? () => signOut() : () => signIn()}
          _hover={{
            backgroundColor: 'rgba(255, 255, 255, 0.2)',
          }}
        >
          {sessionData ? 'Sign out' : 'Sign in'}
        </Button>
      </chakra.div>
    </>
  );
};
